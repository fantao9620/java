面向对象的思想
将现实生活中的事务进行分类,抽象出类,具有静态特征和动态特征
静态特征是类中的属性,动态特征是类中的方法
类的定义,定义属性(成员变量)(字段)和方法(成员方法)
什么是类:现实生活中事务分类具有共性特征的(静态特征和动态特征)
类的属性:(成员变量)(字段)
和局部变量区别:默认值,不用初始化就可以直接用,方法可以在类中任意地方都可以调用
对象的创建和使用
创建对象:类名        对象名=new 类名();
        变量类型     变量名
内存中如何分配:类名          对象名 这是在栈内存分配空间
            new 类名         这是在堆内存中给属性分配空间
使用对象
对象名.属性名
对象名.方法名([实参])
构造器
new 类名()这是直接调用系统默认给的无参构造
可以自定义构造器,带参数的,如果自定义了,默认构造器就没有了
一般自定义构造器之后,习惯性把无参构造手动写出
构造方法特点:方法名和类名一致;
无返回类型;也不能用return返回值
Java包的概念
不同包访问类,用import关键字导入需要使用的类
涉及权限访问
              private     defalut    protected   public
同一类         是              是        是          是
同一包                         是        是          是   
不同包子类                               是          是
不同包不是子类                                        是
封装的使用
目前封装代码:1将字段私有化
2提供公共的set,get方法访问器对于字段的读写操作
3.根据需求在公共访问器里面设置规则
封装的好处:
隐藏内部细节
方便维护
方便扩展
只能通过特定的方式访问
static、this关键字
this可以用在区分成员变量局部变量;
this()在本类中其中一个构造方法中调用另一个构造方法,并且只能写在第一个
static 修饰属性,方法,代码块
修饰属性,此属性变成类的变量(静态属性),所有对象共享
修饰方法,此方法变成类的方法(静态方法),所有对象都可以访问
静态方法只能调用静态属性,不能调用非静态属性
普通方法所有属性都可以调用
修饰代码块,类加载时调用,只调用一次,之后不再调用
Java单例的概念和实现
单例:有且只有一个唯一的实例
实现思路:1.将构造器私有化2.创建一个私有静态对象,类型是本类的类型,初始化本类的构造
3.创建一个公共的方法,返回上面创建的静态对象
